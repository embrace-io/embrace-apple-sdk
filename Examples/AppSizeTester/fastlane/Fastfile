require 'json'

default_platform(:ios)

IPAS_FOLDER = "ipas"

before_all do |lane, options|
  # Hide all timestamps
  ENV["FASTLANE_HIDE_TIMESTAMP"] = "1"
end

desc "Calculates the SDK size by generating two .ipa files (with and without the SDK)"
desc "and comparing their sizes using the 'App Thinning Size Report.txt' file."
desc "Options:"
desc " - skip_tuist_clean_cache: true to skip 'tuist clean dependencies' (default: false)"
desc " - skip_lane_cleanup: true to skip cleanup of generated IPAs and project files (default: false)"
lane :calculate_sdk_size do |options|
  require_relative './utilities/app_size'

  # Extract Parmeters
  skip_tuist_clean_cache = options[:skip_tuist_clean_cache] || false
  skip_lane_cleanup = options[:skip_lane_cleanup] || false


  # Clean caches first
  sh("tuist clean dependencies") unless skip_tuist_clean_cache
  clear_derived_data

  # Create the `.xcodeproj` and `.xcworkspace` with Tuist
  sh("tuist install") 
  sh("tuist generate --no-open --path '..'")

  # Calculating the size of the App that doesn't depend on Embrace
  create_ipa(scheme: "AppSizeTester") 
  app_size_without_sdk = AppSize.from_hash(get_app_size_from_ipa)

  # Calculating the size of the App that depends on Embrace
  create_ipa(scheme: "AppSizeTesterWithSDK") 
  app_size_with_sdk = AppSize.from_hash(get_app_size_from_ipa)

  # Calculate and show Embrace SDK size
  sdk_size = app_size_with_sdk - app_size_without_sdk 

  puts("\n")
  puts(Terminal::Table.new(
    title: "SDK Size".green,
    headings: ['Compressed (MB)', 'Uncompressed (MB)'],
    rows: [[sdk_size.compressed, sdk_size.uncompressed]],
  ))

  File.write("sdk_size.json", {
    compressed: sdk_size.compressed,
    uncompressed: sdk_size.uncompressed
  }.to_json)

  # Clean up
  unless skip_lane_cleanup
    FileUtils.rm_rf("../#{IPAS_FOLDER}")
    FileUtils.rm_rf("./AppSizeTester.xcodeproj")
    FileUtils.rm_rf("./AppSizeTester.xcworkspace") 
  end
end 

desc "Creates an .ipa for a specific scheme"
desc "Options:"
desc " - scheme: the scheme to build. Should be one of the ones listed with `xcodebuild -list`. Mandatory."
lane :create_ipa do |options|
  output_path = IPAS_FOLDER
  case options[:scheme]
  when "AppSizeTester"
    output_path += "/app_without_sdk" 
  when "AppSizeTesterWithSDK"
    output_path += "/app_with_sdk" 
  else 
    UI.user_error!("Unknown scheme '${options[:scheme]}'")
  end 

  gym(
    workspace: "AppSizeTester.xcworkspace",
    scheme: options[:scheme],
    clean: true,
    silent: false,
    output_directory: output_path,
    output_name: "App.ipa",
    export_options: _get_export_options
  )
end

def _get_export_options
  # Run `xcodebuild -help` and look for the `exportOptionsPlist` avilable keys to see which are the correct values for this dictionary
  return {
    method: "ad-hoc", # This value is deprecated in `xcodebuild` and should be replaced with `release-testing` when fastlane supports it [https://github.com/fastlane/fastlane/issues/22028]
    stripSwiftSymbols: true,
    thinning: "<thin-for-all-variants>"
  }
end 