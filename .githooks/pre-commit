#!/bin/bash
export PATH=/usr/local/bin:$PATH

# SETTINGS  ########################################################################################

# depending on your local environment and tools you're using
# you might need to specify the path where swiftlint is installed
SWIFT_LINT=swiftlint

# homebrew path example
# SWIFT_LINT=/opt/homebrew/bin/swiftlint

# attempt to fix files when possible
AUTO_CORRECT=1

# stage fixed files automatically
AUTO_STAGE=0

####################################################################################################

# non-staged changes
FILE_COUNT=0
for file_path in $(git diff --diff-filter=d --name-only | grep ".swift$"); do
    export SCRIPT_INPUT_FILE_$FILE_COUNT=$file_path
    FILE_COUNT=$((FILE_COUNT + 1))
done

# staged changes
for file_path in $(git diff --diff-filter=d --name-only --cached | grep ".swift$"); do
    export SCRIPT_INPUT_FILE_$FILE_COUNT=$file_path
    FILE_COUNT=$((FILE_COUNT + 1))
done

# newly added untracked files
for file_path in $(git ls-files --others --exclude-standard | grep ".swift$"); do
    export SCRIPT_INPUT_FILE_$FILE_COUNT=$file_path
    FILE_COUNT=$((FILE_COUNT + 1))
done


if [ "$FILE_COUNT" -eq 0 ]; then
    echo "No files to lint!"
    exit 0
fi

export SCRIPT_INPUT_FILE_COUNT=$FILE_COUNT

# autocorrect modified files
if [ "$AUTO_CORRECT" -eq 1 ]; then
    FIX_RESULT=$($SWIFT_LINT lint --fix --strict --use-script-input-files --force-exclude)

    if [ "$FIX_RESULT" != "" ]; then
        # stage corrected files
        if [ "$AUTO_STAGE" -eq 1 ]; then
            for ((i=0;i<FILE_COUNT;i++)); do
                var=SCRIPT_INPUT_FILE_$i
                git stage ${!var}
            done
        fi
    fi
fi

# lint modified files
LINT_RESULT=$($SWIFT_LINT lint --strict --use-script-input-files --force-exclude)

echo $LINT_RESULT

if [ "$LINT_RESULT" == "" ]; then
    exit 0
fi

exit 1

