#!/bin/bash
set -e

CLONED_SOURCE_PACKAGES_DIR_PATH=".build"
DERIVED_DATA_PATH=".build/DerivedData"
XCRESULT_PATH=".build/test/output"

if [ -d "$XCRESULT_PATH" ]; then
    rm -rf $XCRESULT_PATH
fi

# Define constants for script
PLATFORM="iphonesimulator"
DEVICE_PATTERN="iPhone-16*"
FALLBACK_SIMULATOR_DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro"

# Use xcodebuild to retrieve list of available SDKs in JSON format
# Use jq for SDK_JSON to find first item in array where platform is 'iphonesimulator'
SDK_JSON=$(xcodebuild -showsdks -json)
SELECTED_SDK=$(echo $SDK_JSON | jq -r ".[] | select(.platform == \"$PLATFORM\")")

if [ -z "$SDK_PATH" ] ; then
    echo "SDK_PATH not set."
fi

if [ -z "$SDK_NAME" ] ; then
    echo "SDK_NAME not set."
fi

SDK_PATH=$(echo $SELECTED_SDK | jq -r '.sdkPath')
SDK_NAME=$(echo $SELECTED_SDK | jq -r '.canonicalName')
SDK_VERSION=$(echo $SELECTED_SDK | jq -r '.sdkVersion')

# Output selected SDK to console
echo '--- SELECTED SDK ---'
echo $SDK_NAME
echo $SDK_PATH

# Use xcrun simctl to get identifier of first available iPhone simulator
# Use jq to parse JSON output like devices.txt
AVAILABLE_DEVICES_JSON=$(xcrun simctl list -j devices available)
DEVICE_JSON_LIST=$(echo $AVAILABLE_DEVICES_JSON | jq -r ".devices | flatten | map(select(.name | test(\"$DEVICE_PATTERN\")))")

echo "Creating new simulator..."
CREATED_DEVICE_UDID=$(xcrun simctl create "Embrace-iPhone-UITests" "$FALLBACK_SIMULATOR_DEVICE_TYPE")
echo "Created new simulator with UDID: $CREATED_DEVICE_UDID"
SELECTED_DEVICE_UDID=$CREATED_DEVICE_UDID

# `IS_XCTEST` envvar is work-around for plugin dependency being included in iOS target when using `xcodebuild test`
# (See Package.swift `targetPlugins`)
# https://forums.swift.org/t/xcode-attempts-to-build-plugins-for-ios-is-there-a-workaround/57029

IS_XCTEST=true \
xcodebuild clean \
    -project './Examples/EmbraceIOTestApp/EmbraceIOTestApp.xcodeproj' \
    -scheme 'EmbraceIOTestApp' \
    -testPlan 'EmbraceIOTestAppTests' \
    -configuration "Debug" \
    -destination "id=$CREATED_DEVICE_UDID" \
    -derivedDataPath $DERIVED_DATA_PATH \
    -resultBundlePath $XCRESULT_PATH \
    test

# If we created a new simulator, delete it
if [ -n "${CREATED_DEVICE_UDID}" ]; then
    echo "Deleting simulator with UDID: $CREATED_DEVICE_UDID"
    xcrun simctl delete $CREATED_DEVICE_UDID
fi
