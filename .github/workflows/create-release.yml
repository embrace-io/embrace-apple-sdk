name: Create Release

env:
  ARCHIVE_QUIET_MODE: 1

on:
  push:
    branches:
      - "release/*"

  workflow_dispatch:
    inputs:
      rc_version:
        description: "The release candidate version to create"
        required: true
      is_production_ready:
        description: "Is the release candidate production ready"
        type: boolean
        default: false

permissions:
  contents: read
  packages: read

jobs:
  extractor:
    name: Extract elements from context
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      RC_VERSION: ${{ github.event.inputs.rc_version }}
      IS_PRODUCTION_READY: ${{ github.event.inputs.is_production_ready }}
    outputs:
      rc_version: ${{ steps.rc_version_extractor.outputs.rc_version }}
      is_production_ready: ${{ env.IS_PRODUCTION_READY }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: true 

      - name: Define Production Readiness
        run: |
          if [ -z "$IS_PRODUCTION_READY" ]; then
              echo "IS_PRODUCTION_READY=false" >> $GITHUB_ENV
          fi
          echo "Production readiness determined: $IS_PRODUCTION_READY"

      - name: Validate and Extract RC Version Number
        id: rc_version_extractor
        run: |
          # If the workflow wasn't triggered manually, extract the version number either from branch or tag
          # (depending the event which triggered the workflow).
          if [ -z "$RC_VERSION" ]; then
            if [[ "${GITHUB_REF_TYPE}" == "branch" ]]; then
              BRANCH_VERSION=${GITHUB_REF_NAME##release/}
              RC_VERSION=$BRANCH_VERSION
            fi
          fi

          # Production-ready versions should always follow a "definitive" version format:
          # - xx.yy.zz
          # But, non-production-ready versions support having pre-release versions, like:
          # - x.y.z-rc1
          if [ "$IS_PRODUCTION_READY" == "true" ]; then
            if ! [[ "$RC_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "::error::RC_VERSION of '$RC_VERSION' is not in the correct production-ready format."
              exit 1
            fi
          else
            if ! [[ "$RC_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
              echo "::error::RC_VERSION of '$RC_VERSION' is not compliant with pre-release semver."
              exit 1
            fi

            VERSION_COUNTER=1

            while [ ! -z $(git tag -l ${RC_VERSION}-rc${VERSION_COUNTER}) ]; do
              VERSION_COUNTER=$((VERSION_COUNTER + 1))
            done

            RC_VERSION="${RC_VERSION}-rc${VERSION_COUNTER}"
          fi

          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT
          echo "::notice::Using RC_VERSION of $RC_VERSION"

  build_release_candidate:
    name: Bump Version and Build Release
    runs-on: macos-14
    timeout-minutes: 60
    needs:
      - extractor
    permissions:
      contents: write
    env:
      RC_VERSION: ${{ needs.extractor.outputs.rc_version }}
      IS_PRODUCTION_READY: ${{ needs.extractor.outputs.is_production_ready }}
    steps:
      - name: Validate access to versioning backend
        uses: embrace-io/public-actions/upload-sdk-version@88167cd1a3fce3418e26c8c842026e6dfab99e41
        with:
          platform: 'ios'
          version: ${{ needs.extractor.outputs.rc_version }}
          dryRun: true
          uploadUrl: ${{ vars.SDK_VERSION_URL }}
        env:
          SDK_VERSION_TOKEN: ${{ secrets.SDK_VERSION_TOKEN }}

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Bump Version
        run: |
          echo "::notice::Bumping version to '$RC_VERSION'"
          bin/version_bump $RC_VERSION

          # DEV: show diff
          git diff

          if [[ `git status --porcelain` ]]; then
            echo "VERSION_BUMPED=true" >> $GITHUB_ENV
          fi

      - name: Commit Version Changes
        if: env.VERSION_BUMPED == 'true'
        run: |
          git config --global user.name "embrace-ci"
          git config --global user.email "embrace-ci@users.noreply.github.com"

          git add EmbraceIO.podspec \
              Sources/EmbraceCommonInternal/EmbraceMeta.swift

          git diff --cached

          git commit -m "CI/CD: Bumps version to '$RC_VERSION'"
          git push

      - name: Select Xcode 15
        run: sudo xcode-select -switch /Applications/Xcode_15.4.app

      - name: Tag the release candidate version
        run: |
          git tag $RC_VERSION
          git push origin $RC_VERSION

  create_github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - extractor
      - build_release_candidate
    permissions:
      contents: write
    steps:
      - name: Disable GitHub CLI Prompt if Enabled
        run: |
          if [ "$(gh config get prompt)" = "enabled" ]; then
            gh config set prompt disabled
          fi

      - name: Create/Edit Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          RC_VERSION: ${{ needs.extractor.outputs.rc_version}}
          IS_PRODUCTION_READY: ${{ needs.extractor.outputs.is_production_ready }}
        run: |
          echo "::notice::Creating Release $RC_VERSION in Github"
          if gh release view $RC_VERSION --repo embrace-io/embrace-apple-sdk > /dev/null 2>&1; then
            echo "::warning::Version '$RC_VERSION' already exists in GitHub. Skipping and continuing"
          else 
            PRERELEASE_FLAG=""
            if [ "$IS_PRODUCTION_READY" == "false" ]; then
              PRERELEASE_FLAG="--prerelease"
            fi
            gh release create $RC_VERSION --title "$RC_VERSION" $PRERELEASE_FLAG --repo embrace-io/embrace-apple-sdk  --verify-tag
          fi

  push_podspec:
    name: Push Podspec to Cocoapods
    runs-on: macos-14
    timeout-minutes: 30
    needs:
      - extractor
      - create_github_release
    env:
      COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
      RC_VERSION: ${{ needs.extractor.outputs.rc_version }}
      IS_PRODUCTION_READY: ${{ needs.extractor.outputs.is_production_ready }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.extractor.outputs.rc_version }}
          fetch-depth: 0
          path: embrace-apple-sdk
          persist-credentials: true

      - name: Be sure Podspec has bumped version
        run: |
          cd embrace-apple-sdk
          bin/version_bump $RC_VERSION --cocoapods

      - name: Push EmbraceIO Podspec
        run: |
          if pod trunk info EmbraceIO 2>&1 | grep -F " - $RC_VERSION (" > /dev/null; then
            echo "::warning::Version '$RC_VERSION' already exists in CocoaPods. Skipping and continuing"
          else
            pod trunk push embrace-apple-sdk/EmbraceIO.podspec --allow-warnings
          fi
  create_internal_release:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - create_github_release
      - push_podspec
      - extractor
    env:
      RC_VERSION: ${{ needs.extractor.outputs.rc_version }}
      IS_PRODUCTION_READY: ${{ needs.extractor.outputs.is_production_ready }}

    steps:
      - name: Record SDK Version History
        uses: embrace-io/public-actions/upload-sdk-version@88167cd1a3fce3418e26c8c842026e6dfab99e41
        with:
          platform: 'ios'
          version: ${{ needs.extractor.outputs.rc_version }}
          dryRun: false
          uploadUrl: ${{ vars.SDK_VERSION_URL }}
        env:
          SDK_VERSION_TOKEN: ${{ secrets.SDK_VERSION_TOKEN }}
