name: Create Release Candidate (6.x)

env:
  ARCHIVE_QUIET_MODE: 1
  AWS_DEFAULT_REGION: "${{ vars.AWS_DEFAULT_REGION }}"

on:
  # Temporal
  push:
    branches:
      - "release/*"

  workflow_dispatch:
    inputs:
      rc_version:
        description: "The release candidate version to create"
        required: true
      override_version:
        description: "Should delete previous podspec (if exist) and create a new one"
        type: boolean
        default: false

permissions:
  id-token: write
  contents: write
  packages: read

jobs:
  rc_version_number:
    name: Set RC_VERSION from Branch if Necessary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      RC_VERSION: ${{ github.event.inputs.rc_version }}
    outputs:
      rc_version: ${{ steps.extractor.outputs.rc_version }}
      on_release_branch: ${{ steps.extractor.outputs.on_release_branch }}
    steps:
      - name: Extract RC Version Number
        id: extractor
        run: |
          if [ -z "$RC_VERSION" ]; then
            BRANCH_VERSION=${GITHUB_REF_NAME##release/}
            RC_VERSION=$BRANCH_VERSION
            echo "on_release_branch=true" >> $GITHUB_OUTPUT
          fi

          if [[ "$RC_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Using RC_VERSION of $RC_VERSION"
          else
            echo "Error: RC_VERSION of '$RC_VERSION' is not the correct format."
            exit 1
          fi

          echo "Using RC_VERSION $RC_VERSION"
          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT

  build_release_candidate:
    name: Bump Version and Build Release
    runs-on: macos-13
    timeout-minutes: 60
    needs:
      - rc_version_number
    env:
      RC_VERSION: ${{ needs.rc_version_number.outputs.rc_version }}
      ON_RELEASE_BRANCH: ${{ needs.rc_version_number.outputs.on_release_branch }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Bump Version
        run: |
          echo "Bumping version to '$RC_VERSION'"
          bin/version_bump $RC_VERSION

          # DEV: show diff
          git diff

          if [[ `git status --porcelain` ]]; then
            echo "VERSION_BUMPED=true" >> $GITHUB_ENV
          fi

      - name: Commit Version Changes
        if: env.VERSION_BUMPED == 'true'
        run: |
          git config --global user.name "embrace-ci"
          git config --global user.email "embrace-ci@users.noreply.github.com"

          git add EmbraceIO.podspec \
              EmbraceIO-DEV.podspec \
              Sources/EmbraceCommonInternal/EmbraceMeta.swift
          git diff --cached
          git commit -m "CI/CD: Bumps version to '$RC_VERSION'"
          git push

      - name: Select Xcode 15
        run: sudo xcode-select -switch /Applications/Xcode_15.1.app

      - name: Install Mise
        run: |
          # Install Mise
          curl https://mise.jdx.dev/install.sh | sh
          echo "$HOME/.local/share/mise/bin" >> $GITHUB_PATH
          echo "$HOME/.local/share/mise/shims" >> $GITHUB_PATH

      - name: Build XCFramework
        run: |
          eval "$(~/.local/bin/mise activate bash)" >> ~/.bashrc
          echo "$PATH"
          mise doctor
          ./bin/build_xcframeworks.sh

      # TODO: Finish this step
      - name: Sign XCFramework
        run: echo "We're not going to sign the xcframeworks at this moment. Will do it later"

      - name: Zip XCFrameworks
        run: |
          DIR=$(pwd -P)
          cd build; zip -r "$DIR/xcframeworks.zip" xcframeworks

      - name: Store XCFrameworks
        uses: actions/upload-artifact@v4
        with:
          name: Embrace-Universal Build Artifacts
          path: xcframeworks.zip

  archive_cocoapods_artifacts:
    name: Archive Cocoapods Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - rc_version_number
      - build_release_candidate
    env:
      RC_VERSION: ${{ needs.rc_version_number.outputs.rc_version }}

    steps:
      - name: Determine latest embrace_support.zip version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          version=$(gh release list --repo embrace-io/action-symbol-upload --json tagName --jq '.[] | select(.tagName | startswith("embrace_support-")) | .tagName' --order desc | head -1)
          echo "Using tool version ${version}"
          echo "SUPPORT_TOOL=${version}" >> $GITHUB_ENV

      - name: Download embrace_support.zip
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release --repo embrace-io/action-symbol-upload download ${{ env.SUPPORT_TOOL }} --pattern 'embrace_support-*' --clobber

      - name: Verify and extract embrace_support.zip
        run: |
          if /usr/bin/shasum -a 256 -c ${{ env.SUPPORT_TOOL }}.zip.sha256; then
            unzip -o ${{ env.SUPPORT_TOOL }}.zip
          else
            echo "Checksum verification failed, aborting."
            exit 1
          fi

      - name: Download Artifacts - XCFrameworks
        uses: actions/download-artifact@v4
        with:
          name: Embrace-Universal Build Artifacts

      - name: Unzip Embrace-Universal Build Artifacts
        run: unzip xcframeworks.zip

      - name: Create Cocoapods Release Zip
        run: |
          DIR=$(pwd -P)
          mkdir artifacts
          mv run.sh upload artifacts/
          chmod +x artifacts/run.sh artifacts/upload

          cd artifacts; zip "$DIR/embrace_$RC_VERSION.zip" *; cd -;
          zip "$DIR/embrace_$RC_VERSION.zip" -r xcframeworks/*; cd -;

      - name: Store Cocoapods Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Cocoapods Release Archive
          path: embrace_${{ env.RC_VERSION }}.zip

  create_github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - rc_version_number
      - archive_cocoapods_artifacts

    steps:
      - name: Download Cocoapods Release Archive
        uses: actions/download-artifact@v4
        with:
          name: Cocoapods Release Archive
          path: cocoapods/

      - name: Disable GitHub CLI Prompt if Enabled
        run: |
          if [ "$(gh config get prompt)" = "enabled" ]; then
            gh config set prompt disabled
          fi

      - name: Create Draft Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.rc_version_number.outputs.rc_version }} cocoapods/embrace_${{ needs.rc_version_number.outputs.rc_version }}.zip -t "Release ${{ needs.rc_version_number.outputs.rc_version }}" -p

  push_podspec:
    name: Push Podspec to Cocoapods
    runs-on: macos-13
    timeout-minutes: 10
    needs:
      - rc_version_number
      - create_github_release
    env:
      COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
      RC_VERSION: ${{ needs.rc_version_number.outputs.rc_version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          path: embrace-apple-core-internal

      - name: Be sure Podspec has bumped version
        # If we haven't pushed version bump podspec will use existing version
        # See "Commit Version Changes" step
        run: |
          cd embrace-apple-core-internal
          bin/version_bump $RC_VERSION --cocoapods
      - name: Delete and recreate podspec if override is true
        if: ${{ inputs.override_version }}
        run: |
          info=$(pod trunk info EmbraceIO-DEV)
          if echo "$info" | grep -q "$version"; then
            echo "y" | pod trunk delete EmbraceIO-DEV $RC_VERSION
          else
            echo "Version doesn't exist at all, so it shouldn't be removed"
          fi
      - name: Push EmbraceIO-DEV Podspec
        run: |
          pod trunk push embrace-apple-core-internal/EmbraceIO-DEV.podspec --allow-warnings